.data
	a00: .word 1
	a01: .word 2
	a02: .word 3
	a10: .word 0
	a11: .word 1
	a12: .word 4
	a20: .word 0
	a21: .word 0
	a22: .word 1
	
	b00: .word 1
	b01: .word -2
	b02: .word 5
	b10: .word 0
	b11: .word 1
	b12: .word -4
	b20: .word 0
	b21: .word 0
	b22: .word 1
	
	c00: .word 0
	c01: .word 0
	c02: .word 0
	c10: .word 0
	c11: .word 0
	c12: .word 0
	c20: .word 0
	c21: .word 0
	c22: .word 0
	
	STRING: .asciiz " "
	.align 0
	fout: .asciiz "array.txt"
	
.text
main:
	lw $t0, a00	# Carregam-se da memória de dados para os registradores os valores dos elementos da matriz A
	lw $t1, a01
	lw $t2, a02
	lw $t3, a10
	lw $t4, a11
	lw $t5, a12
	lw $t6, a20
	lw $t7, a21
	lw $t8, a22
	
	lw $t9, b00	# Carregam-se da memória de dados para os registradores os valores dos elementos da matriz B
	lw $s0, b01
	lw $s1, b02
	lw $s2, b10
	lw $s3, b11
	lw $s4, b12
	lw $s5, b20
	lw $s6, b21
	lw $s7, b22
	
	
	mul $t0, $t0, $t9	# Operacões com os elementos da linha 0 e coluna 0
	mul $t1, $t1, $s2
	mul $t2, $t2, $s5
	
	jal Linha_0_coluna_n
	sw $t2, c00	# Escreve-se o elemento "c00" da matriz resultante na memória de dados
	lw $t2, a02
	
	
	mul $t0, $t0, $s0	# Operacões com os elementos da linha 0 e coluna 1
	mul $t1, $t1, $s3
	mul $t2, $t2, $s6
	
	jal Linha_0_coluna_n
	sw $t2, c01	# Escreve-se o elemento "c01" da matriz resultante na memória de dados
	lw $t2, a02
	
	mul $t0, $t0, $s1	# Operacões com os elementos da linha 0 e coluna 2
	mul $t1, $t1, $s4
	mul $t2, $t2, $s7
	
	jal Linha_0_coluna_n
	sw $t2, c02	# Escreve-se o elemento "c02" da matriz resultante na memória de dados
	lw $t2, a02
	
	mul $t3, $t3, $t9	# Operacões com os elementos da linha 1 e coluna 0
	mul $t4, $t4, $s2
	mul $t5, $t5, $s5
	
	jal Linha_1_coluna_n
	sw $t5, c10	# Escreve-se o elemento "c10" da matriz resultante na memória de dados
	lw $t5, a12
	
	mul $t3, $t3, $s0	# Operacões com os elementos da linha 1 e coluna 1
	mul $t4, $t4, $s3
	mul $t5, $t5, $s6
	
	jal Linha_1_coluna_n
	sw $t5, c11	# Escreve-se o elemento "c11" da matriz resultante na memória de dados
	lw $t5, a12
	
	mul $t3, $t3, $s1	# Operacões com os elementos da linha 1 e coluna 2
	mul $t4, $t4, $s4
	mul $t5, $t5, $s7
	
	jal Linha_1_coluna_n
	sw $t5, c12	# Escreve-se o elemento "c12" da matriz resultante na memória de dados
	lw $t5, a12
	
	mul $t6, $t6, $t9	# Operacões com os elementos da linha 2 e coluna 0
	mul $t7, $t7, $s2
	mul $t8, $t8, $s5
	
	jal Linha_2_coluna_n
	sw $t8, c20	# Escreve-se o elemento "c20" da matriz resultante na memória de dados
	lw $t8, a22
	
	mul $t6, $t6, $s0	# Operacões com os elementos da linha 2 e coluna 1
	mul $t7, $t7, $s3
	mul $t8, $t8, $s6
	
	jal Linha_2_coluna_n
	sw $t8, c21	# Escreve-se o elemento "c21" da matriz resultante na memória de dados
	lw $t8, a22
	
	mul $t6, $t6, $s1	# Operacões com os elementos da linha 2 e coluna 2
	mul $t7, $t7, $s4
	mul $t8, $t8, $s7
	
	jal Linha_2_coluna_n
	sw $t8, c22	# Escreve-se o elemento "c22" da matriz resultante na memória de dados
	lw $t8, a22
	
	j matriz_em_arquivo_txt	# Salta-se para o endereco na memória de programa contendo uma instrucão "nop", determinando o fim do programa
	
	
	Linha_0_coluna_n: add $t0, $t0, $t1
	add $t2, $t2, $t0
	
	lw $t0, a00	
	lw $t1, a01
	jr $ra
	
	Linha_1_coluna_n: add $t3, $t3, $t4
	add $t5, $t5, $t3
	
	lw $t3, a10	
	lw $t4, a11
	jr $ra
	
	Linha_2_coluna_n: add $t6, $t6, $t7
	add $t8, $t8, $t6
	
	lw $t6, a20	
	lw $t7, a21
	jr $ra
	
	# ===============================================================================================
	# InÌcio do Programa principal - main.
	# ===============================================================================================	
matriz_em_arquivo_txt:
	#
	# ----- O cÛdigo abaixo abre um arquivo para ser escrito. -----
	#
	li	$v0, 13			# Comando para abrir novo arquivo.
	la	$a0, fout		# Carrega o nome do arquivo a ser aberto.
	li	$a1, 1			# Aberto para escrita (0: lÍr; 1: escrever).
	li	$a2, 0			# Modo ignorado (neste caso).
	syscall				# Chamada de sistema. Descritor do arquivo È colocado em $v0.
	move	$s6, $v0		# Salva descritor do arquivo para uso no fechamento posterior.
	
	# 
	# ----- Aqui o programa principal chama o procedimento de convers„o de dados escritos no buffer ARRAY 
	# para o buffer STRING em ASCII. -----
	# 	
	jal	transfer		# Chama procedimento para manipulaÁ„o dos arrrays. 

	# 
	# ----- ApÛs o retorno do procedimento, salva o buffer STRING no arquivo que foi aberto anteriormente. -----
	# 		
	li	$v0, 15			# Comando para escrever no arquivo.
	move	$a0, $s6		# Passa o descritor do arquivo previamente salvo.
	la	$a1, STRING		# Passa endereÁo base do buffer a ser salvo.
	li	$a2, 18			# Delimita tamanho do buffer a ser escrito.
	syscall				# Chamada de sistema. Escreve buffer no arquivo.
	
	# 
	# ----- ApÛs transferir o buffer para o arquvio, o cÛdigo abaixo fecha o arquivo com uma chamada no SO. -----
	# 	
	li	$v0, 16			# Comando para fechamento do arquivo.
	move	$a0, $s6		# Passa o descritor do arquivo que ser· fechado.
	syscall				# Arquivo È fechado pelo Sistema Operacional.
	
end:
	j	end			# Loop eterno. Programa fica neste ponto indefinidamente.
	# ===============================================================================================
	# Fim do programa principal. 
	# ===============================================================================================
		

	# ===============================================================================================
	# InÌcio do Procedimento para transferÍncia de dados entre ARRAY e STRING. 
	# ===============================================================================================
transfer:
	addi	$sp, $sp, -12		# Prepara PUSH para salvar dados de a0 e a1 (usados na rotina principal!)
	sw	$ra, 8($sp)		# Salva retorno - Stack Pointer.
	sw	$a0, 4($sp)		# Salva $a0.
	sw	$a1, 0($sp)		# Salva $a1.

	la	$a0, c00		# Atualiza os endereÁos de ARRAY e STRING em $a0 e $a1.
	la	$a1, STRING		#
		
	li	$s2, 10			# Limite de iteraÁıes a serem feitas para transferir os dados
	li	$s7, 1   		# Ser· usado para contar laÁo de loop.
	li	$s4, 0  		# Õndice do ARRAY comeÁando em i = 0
	li	$s5, 0   		# Õndice da STRING comeÁando em j = 0
loop:	
	#
	# ----- Nesta sequÍncia vamos tirar um dado de ARRAY[i] -----
	#
	move	$s3, $s4		# Pega Ìndice de ARRAY.
	add	$t1, $s3, $s3		# Aponta para o prÛximo Ìndice (2*i).
	add	$t1, $t1, $t1		# (4*i), sendo que i est· armazenado em $s3.
	add	$t1, $t1, $a0		# EndereÁo Base + 4*i --> agora, apontando para o elemento do array.
	
	lw	$t0, 0($t1)		# $t0 <-- ARRAY[i].
	addi	$t0, $t0, 48		# Incrementa de 48 para transformar em caractere ASCII.
	addi	$s4, $s4, 1		# Incrementa Ìndice i para a prÛxima iteraÁ„o.
	
	#
	# ----- Nesta sequÍncia vamos colocar o dado retirado de ARRAY[i] em STRING[j] -----
	#
	move	$s3, $s5		# Pega Ìndice da STRING de destino.
	#add	$t1, $s3, $s3		# Aponta para o prÛximo Ìndice (2*j)
	#add	$t1, $t1, $t1		# (4*j), sendo que j est· armazenado em $s3
	add	$t1, $s3, $a1		# EndereÁo Base + 4*j --> agora, apontando para o elemento do array.
	
	sb 	$t0, 0($t1)	# Armazena conte˙do retirado de ARRAY[i] em STRING[j].
	
	rem $t2, $s7, 3
	beq $t2, $zero, ENDL				
	li	$t0, 32		# Coloca caracter de "espaco em branco" (ASCII) em $t0.
	sb	$t0, 1($t1)		# Armazena espeÁo em branco em STRING[j+1].
	j INC_J
ENDL:
	li $t0, 10		# Passa-se para a próxima linha da matriz, armazenando-se o caractere "LF" na memória de dados
	sb $t0, 1($t1)
INC_J:
	addi	$s5, $s5, 2		# Incrementa Ìndice j para a prÛxima iteraÁ„o.
	addi	$s7, $s7, 1		# Incrementa laÁo do loop.
	bne	$s2, $s7, loop
	
	lw	$a1, 0($sp)		# Restaura $a1.
	lw	$a0, 4($sp)		# Restaura $a0.
	lw	$ra, 8($sp)		# Restaura $ra.
	addi	$sp, $sp, 12		# Atualiza $SP (POP de trÍs instruÁıes).
	jr	$ra			# Retorna do procedimento para o programa principal.
	# ===============================================================================================
	# Fim do Procedimento. 
	# ===============================================================================================
	
